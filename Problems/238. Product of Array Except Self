# Python

## Better Solution
```
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        renums = [1]*len(nums)
        pre = 1

        for i in range(len(nums)):
            renums[i] = pre
            pre *= nums[i]
        post = 1
        for i in range(len(nums)-1,-1,-1):
            renums[i] = post * renums[i]
            post *= nums[i]
        return renums 
```

## O(n^2) Solution & using division solution
```
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        my_list =[]

        for i in range(len(nums)):
            mul = 1
            for index, val in enumerate(nums):
                if index != i :
                    mul *= val
            my_list.append(mul)
        return my_list

        


```
